{
	"info": {
		"_postman_id": "69974a93-93dc-4de9-8bbe-96dfb4563805",
		"name": "Menu Planning Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.environment.set(\"token\", JsonData.token);",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    pm.expect(JsonData.token).to.be.a('string');",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"mohitkhanna\",\n  \"password\": \"khanna1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/auth/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Username Taken\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"mohitkhanna\",\n  \"password\": \"khanna1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/auth/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup with no password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Unprocessable Entity\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"mohitkhanna\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/auth/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.environment.set(\"token\", JsonData.token);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    const JsonData = pm.response.json()",
							"    pm.expect(JsonData.token).to.be.a('string');",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"mohitkhanna\",\n  \"password\": \"khanna1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.environment.set(\"token\", JsonData.token);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body is correct\", function () {",
							"    const JsonData = pm.response.json()",
							"    pm.expect(JsonData.token).to.be.a('string');",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"mohitkhanna\",\n  \"password\": \"khanna1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with no password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Invalid Username/Password\");",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"mohitkhanna\",\n  \"password\": \"wrong_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Recipe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"pm.environment.set(\"recipe_uuid\", JsonData.uuid);",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Test classification\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.classification).to.eql('Breakfast');",
							"});",
							"pm.test(\"Test image\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.image).to.eql('link to image');",
							"});",
							"pm.test(\"Test ingredients\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ingredients).to.be.a('array');",
							"});",
							"pm.test(\"Test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql('sandwich');",
							"});",
							"pm.test(\"Test nutirtional_information\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.nutirtional_information).to.eql('some string');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"sandwich\",\n  \"steps\": \"step1,step2, there you go!\",\n  \"classification\": \"Breakfast\",\n  \"nutirtional_information\": \"some string\",\n  \"image\": \"link to image\",\n  \"ingredients\": [\n    {\n      \"name\": \"bread\",\n      \"image\": \"link_image_\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/recipe/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Recipe with no ingredients",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Unprocessable Entity\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"sandwich\",\n  \"steps\": \"step1,step2, there you go!\",\n  \"classification\": \"Breakfast\",\n  \"nutirtional_information\": \"some string\",\n  \"image\": \"link to image\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/recipe/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe by uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test classification\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.classification).to.eql('Breakfast');",
							"});",
							"pm.test(\"Test image\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.image).to.eql('link to image');",
							"});",
							"pm.test(\"Test ingredients\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ingredients).to.be.a('array');",
							"});",
							"pm.test(\"Test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql('sandwich');",
							"});",
							"pm.test(\"Test nutirtional_information\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.nutirtional_information).to.eql('some string');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/recipe/?uuid={{recipe_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe by uuid with expired token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Token Expired\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token_expired}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/recipe/?uuid={{recipe_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe by uuid without token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Unsupplied Authorization Token\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/recipe/?uuid={{recipe_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Recipe by uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test classification\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Success');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"updated sandwich\",\n  \"steps\": \"step1,step2, there you go!\",\n  \"classification\": \"Breakfast\",\n  \"nutirtional_information\": \"updated some string\",\n  \"image\": \"link to image\",\n  \"ingredients\": [\n    {\n      \"name\": \"bread\",\n      \"image\": \"link_image_\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/recipe/?uuid={{recipe_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Recipe by uuid without uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Recipe not found\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"updated sandwich\",\n  \"steps\": \"step1,step2, there you go!\",\n  \"classification\": \"Breakfast\",\n  \"nutirtional_information\": \"updated some string\",\n  \"image\": \"link to image\",\n  \"ingredients\": [\n    {\n      \"name\": \"bread\",\n      \"image\": \"link_image_\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/recipe/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_uuid}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Recipe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.a('array');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/recipe/list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Recipe with improper token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Authorization Token must start with 'Token'\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/recipe/list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Menu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"pm.environment.set(\"menu_uuid\", JsonData.uuid);",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Test description\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.description).to.eql('Menu for feb week2 2021');",
							"});",
							"pm.test(\"Test week\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.week).to.eql(6);",
							"});",
							"pm.test(\"Test year\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.year).to.eql(2022);",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"Menu for feb week2 2021\",\n  \"week\": 6,\n  \"year\": 2022,\n  \"recipes\": [\n    \"{{recipe_uuid}}\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/menu/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"menu",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Menu by uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test description\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.description).to.eql('Menu for feb week2 2021');",
							"});",
							"pm.test(\"Test week\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.week).to.eql(6);",
							"});",
							"pm.test(\"Test year\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.year).to.eql(2022);",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8090/v1/menu/?uuid={{menu_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"menu",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{menu_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Menu by uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test Response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Success');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"menu for week1 feb\",\n  \"week\": 22,\n  \"year\": 2021,\n  \"recipes\": [\n    \"123123-rwr\",\n    \"234213-gfsdfgf-12\"\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/menu/?uuid={{menu_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"menu",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{menu_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Menu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.a('array');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/menu/list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"menu",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Review Menu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"pm.environment.set(\"menu_review_uuid\", JsonData.uuid);",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Test comments\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.comments).to.eql('Easy and tasty!');",
							"});",
							"pm.test(\"Test ratings\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ratings).to.eql(4);",
							"});",
							"pm.test(\"Test type\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.type).to.eql('Menu');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"ratings\": 4,\n  \"comments\": \"Easy and tasty!\",\n  \"type\": \"Menu\",\n  \"menu_id\": \"{{menu_uuid}}\",\n  \"recipe_id\": \"\",\n  \"customer_id\": \"dadfsd1221-4221-fefe-11\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/review/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"review",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Review Recipe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"pm.environment.set(\"recipe_review_uuid\", JsonData.uuid);",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Test comments\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.comments).to.eql('Easy and tasty!');",
							"});",
							"pm.test(\"Test ratings\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ratings).to.eql(4);",
							"});",
							"pm.test(\"Test type\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.type).to.eql('Recipe');",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"ratings\": 4,\n  \"comments\": \"Easy and tasty!\",\n  \"type\": \"Recipe\",\n  \"menu_id\": \"\",\n  \"recipe_id\": \"{{recipe_uuid}}\",\n  \"customer_id\": \"dadfsd1221-4221-fefe-11\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/review/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"review",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Review by uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test comments\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.comments).to.eql('Easy and tasty!');",
							"});",
							"pm.test(\"Test ratings\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ratings).to.eql(4);",
							"});",
							"pm.test(\"Test type\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.type).to.eql('Menu');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/review/?uuid={{menu_review_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"review",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{menu_review_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Review by uuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test Response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Success');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"ratings\": 4,\n  \"comments\": \"Easy and tasty!\",\n  \"type\": \"Recipe\",\n  \"menu_id\": \"\",\n  \"recipe_id\": \"{{recipe_uuid}}\",\n  \"customer_id\": \"dadfsd1221-4221-fefe-11\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8090/v1/review/?uuid={{recipe_review_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"review",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_review_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Review",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.a('array');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/review/list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"review",
						"list"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Review",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test Response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Success');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/review/?uuid={{recipe_review_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"review",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_review_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Review by uuid Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Review not found\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/review/?uuid={{recipe_review_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"review",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_review_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Menu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test Response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Success');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/menu/?uuid={{menu_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"menu",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{menu_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Menu by uuid Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Menu not found\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8090/v1/menu/?uuid={{menu_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"menu",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{menu_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Recipe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Test Response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('Success');",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/recipe/?uuid={{recipe_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Recipe by uuid Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonData = pm.response.json()",
							"",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(JsonData.message).to.include(\"Recipe not found\");",
							"});",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Token {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8090/v1/recipe/?uuid={{recipe_uuid}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"v1",
						"recipe",
						""
					],
					"query": [
						{
							"key": "uuid",
							"value": "{{recipe_uuid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8090"
		}
	]
}